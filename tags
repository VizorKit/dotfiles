!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/vizorkit/source/dotfiles/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/073c52a/
"	.vimrc	/^inoremap " ""<Left>$/;"	m
'	.vimrc	/^inoremap ' ''<Left>$/;"	m
(	.vimrc	/^inoremap ( ()<Left>$/;"	m
<C-b>	.vimrc	/^nnoremap <C-b> :Buffers<CR>$/;"	m
<C-c>	.vimrc	/^vmap <C-c> "+y<Esc>$/;"	m
<C-l>.	.vimrc	/^nmap <C-l>. :ALECodeAction<CR>$/;"	m
<C-l>f	.vimrc	/^nmap <C-l>f :ALEFindReferences<CR>$/;"	m
<C-l>g	.vimrc	/^nmap <C-l>g :ALEGoToDefinition<CR>$/;"	m
<C-l>h	.vimrc	/^nmap <C-l>h :ALEHover<CR>$/;"	m
<C-l>r	.vimrc	/^nmap <C-l>r :ALERename<CR>$/;"	m
<C-l>s	.vimrc	/^nmap <C-l>s :ALESymbolSearch<CR>$/;"	m
<C-p>	.vimrc	/^nnoremap <C-p> :GFiles<CR>$/;"	m
<Tab>	.vimrc	/^inoremap <expr> <Tab> pumvisible() ? '<C-n>' : SkipClosingPair()$/;"	m
<leader>cb	.vimrc	/^nnoremap <leader>cb :vert :term cargo build<CR><C-W><C-w>$/;"	m
<leader>cr	.vimrc	/^nnoremap <leader>cr :vert :term cargo run<CR><C-w><C-w>$/;"	m
DATA	get-pip.py	/^DATA = b"""$/;"	v
PY2	get-pip.py	/^PY2 = sys.version_info[0] == 2$/;"	v
PY3	get-pip.py	/^PY3 = sys.version_info[0] == 3$/;"	v
SkipClosingPair	.vimrc	/^function! SkipClosingPair()$/;"	f
[	.vimrc	/^inoremap [ []<Left>$/;"	m
_b85alphabet	get-pip.py	/^    _b85alphabet = (b"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"$/;"	v
b85decode	get-pip.py	/^    def b85decode(b):$/;"	f
bootstrap	get-pip.py	/^def bootstrap(tmpdir=None):$/;"	f
cert_parse_args	get-pip.py	/^    def cert_parse_args(self, args):$/;"	f	function:bootstrap	file:
delete-all-pair	.emacs.l	/^(defun delete-all-pair (char)$/;"	f
delete-between-pair	.emacs.l	/^(defun delete-between-pair (char)$/;"	f
g:ale_fix_on_save	.vimrc	/^let g:ale_fix_on_save = 1$/;"	v
g:ale_fixers	.vimrc	/^let g:ale_fixers = {$/;"	v
g:ale_linters	.vimrc	/^let g:ale_linters = {$/;"	v
get-char-pair	.emacs.l	/^(defun get-char-pair (chr)$/;"	f
get-end-char	.emacs.l	/^(defun get-end-char (chr)$/;"	f
get-start-char	.emacs.l	/^(defun get-start-char (chr)$/;"	f
iterbytes	get-pip.py	/^    def iterbytes(buf):$/;"	f
iterbytes	get-pip.py	/^    iterbytes = iter$/;"	v
kill-line-at-point	.emacs.l	/^(defun kill-line-at-point ()$/;"	f
kill-thing-at-point	.emacs.l	/^(defun kill-thing-at-point (thing)$/;"	f
kill-word-at-point	.emacs.l	/^(defun kill-word-at-point ()$/;"	f
main	get-pip.py	/^def main():$/;"	f
mapleader	.vimrc	/^let mapleader = ","$/;"	v
pip_entry_point	get-pip.py	/^    from pip._internal.cli.main import main as pip_entry_point$/;"	x	function:bootstrap	file:	nameref:unknown:main
query-replace-from-top	.emacs.l	/^(defun query-replace-from-top ()$/;"	f
seek-backward-to-char	.emacs.l	/^(defun seek-backward-to-char (chr)$/;"	f
seek-backward-to-matching-char	.emacs.l	/^(defun seek-backward-to-matching-char (start end count)$/;"	f
seek-to-matching-char	.emacs.l	/^(defun seek-to-matching-char (start end count)$/;"	f
toggle-frame-split	.emacs.l	/^(defun toggle-frame-split ()$/;"	f
{	.vimrc	/^inoremap { {}<Left><Enter><Enter><Up><Tab>$/;"	m
